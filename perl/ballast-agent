#!/usr/bin/perl -T
#
# Copyright (C) 2010-2018 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration
# (NASA).  All Rights Reserved.
#
# This software is distributed under the NASA Open Source Agreement
# (NOSA), version 1.3.  The NOSA has been approved by the Open Source
# Initiative.  See http://www.opensource.org/licenses/nasa1.3.php
# for the complete NOSA document.
#
# THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY
# KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
# LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
# SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT
# THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT
# DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS
# AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY
# GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING
# DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING
# FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS
# ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF
# PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS".
#
# RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES
# GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR
# RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
# LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
# INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,
# RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND
# HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED
# BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE
# IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.
#

use strict;
require Crypt::CBC;
use Getopt::Long qw(:config bundling no_ignore_case require_order);
use IO::Socket;
use MIME::Base64;
use POSIX qw(setgid setuid);
use Storable qw(nfreeze);
use Sys::Hostname;

our $VERSION = 0.21;

my %conf = (
    conf_file => "/etc/ballastrc",
    data_cipher => "XXTEA_PP",
    data_port => 4411,
    data_timeout => 2,
    key_file => "/etc/ballast.key",
    random_wait => 0,
    user_load => 1,
);

# parse parameters
GetOptions(\%conf, "conf_file|c=s") or die "Invalid options\n";

# parse configuration
open(FILE, $conf{conf_file}) or die "Unable to load config file: $!\n";
my $mline;
while (my $line = <FILE>) {
    # strip whitespace and comments
    $line =~ s/^\s+|\s+$|\s*#.*//g;
    next if (!$line);
    # support line continuation operator
    $mline .= $line;
    next if ($mline =~ s/\s*\\$/ /);
    if ($mline =~ /^(\S+)\s+(.*)/) {
        $conf{$1} = $2;
    }
    $mline = undef;
}
close FILE;
die "Data alias not defined\n" if (!$conf{data_alias});
die "Data host not defined\n" if (!$conf{data_host});

if (-e $conf{key_file}) {
    open(FILE, $conf{key_file}) or die "Unable to load key file: $!\n";
    my $key = <FILE>;
    close FILE;

    # untaint key
    $key = $1 if ($key =~ /(.*)/);

    my %cbc = (
        -key => $key,
        -cipher => $conf{data_cipher},
    );
    $cbc{-keysize} = 16 if ($conf{data_cipher} eq 'XXTEA_PP');
    $conf{-cbc} = Crypt::CBC->new(%cbc);
}

# change group and/or user if specified
if ($conf{run_group}) {
    my $gid = getgrnam($conf{run_group});
    setgid($gid) if (defined $gid);
    die "Unable to change run group\n"
        if (!defined $gid || $( != $gid || $) != $gid);
}
if ($conf{run_user}) {
    my $uid = getpwnam($conf{run_user});
    setuid($uid) if (defined $uid);
    die "Unable to change run user\n"
        if (!defined $uid || $< != $uid || $> != $uid);
}

# sleep random amount of time
if ($conf{random_wait} > 0) {
    sleep int(rand($conf{random_wait}));
}

my %load;
$load{alias} = $conf{data_alias};
$load{host} = (gethostbyname(hostname))[0];

# change host from hostname to ip address only if defined in conf
if ($conf{use_ip_address}) {
    use Net::Address::IP::Local;
    $load{host} = eval {Net::Address::IP::Local->public};
    if ($@) {
	die "Unable to determine IP address";
    }
}

$load{time} = time;

# collect i/o load
if (open(FILE, "/proc/diskstats")) {
    while (my $line = <FILE>) {
        $line =~ s/^\s+|\s+$//g;
        my @cols = split(/\s+/, $line);
        splice(@cols, 0, 3);
        next if (scalar(@cols) != 11);
        $load{d_io_reads} += $cols[0];
        $load{d_io_read_sectors} += $cols[2];
        $load{d_io_read_time} += $cols[3];
        $load{d_io_writes} += $cols[4];
        $load{d_io_write_sectors} += $cols[6];
        $load{d_io_write_time} += $cols[7];
    }
    close FILE;
    $load{d_io_ops} = $load{d_io_reads} + $load{d_io_writes};
    $load{d_io_sectors} = $load{d_io_read_sectors} + $load{d_io_write_sectors};
    $load{d_io_time} = $load{d_io_read_time} + $load{d_io_write_time};
}

# collect average load and processes
if (open(FILE, "/proc/loadavg")) {
    while (my $line = <FILE>) {
        $line =~ s/^\s+|\s+$//g;
        my @cols = split(/\s+/, $line);
        next if (scalar(@cols) != 5);
        $load{load_1} = $cols[0];
        $load{load_5} = $cols[1];
        $load{load_15} = $cols[2];
        $load{procs} = $cols[3];
        $load{procs} =~ s/.*\///;
    }
    close FILE;
}

# collect memory load
if (open(FILE, "/proc/meminfo")) {
    while (my $line = <FILE>) {
        $line =~ s/^\s+|\s+$//g;
        $load{ram_free} = $1 if ($line =~ /MemFree:\s*(\d+)/);
        $load{ram_total} = $1 if ($line =~ /MemTotal:\s*(\d+)/);
        $load{swap_free} = $1 if ($line =~ /SwapFree:\s*(\d+)/);
        $load{swap_total} = $1 if ($line =~ /SwapTotal:\s*(\d+)/);
    }
    $load{ram} = $load{ram_total} - $load{ram_free};
    $load{swap} = $load{swap_total} - $load{swap_free};
    close FILE;
}

# collect network load
if (open(FILE, "/proc/net/dev")) {
    while (my $line = <FILE>) {
        $line =~ s/^\s+|\s+$//g;
        my @cols = split(/:\s*|\s+/, $line);
        next if (scalar(@cols) != 17 || $cols[1] !~ /^\d+$/);
        $load{d_net_read_bytes} += $cols[1];
        $load{d_net_reads} += $cols[2];
        $load{d_net_write_bytes} += $cols[9];
        $load{d_net_writes} += $cols[10];
    }
    close FILE;
    $load{d_net_ops} = $load{d_net_reads} + $load{d_net_writes};
    $load{d_net_bytes} = $load{d_net_read_bytes} + $load{d_net_write_bytes};
}

# collect cpu and other misc load
if (open(FILE, "/proc/stat")) {
    while (my $line = <FILE>) {
        $line =~ s/^\s+|\s+$//g;
        $load{boot_time} = $1 if ($line =~ /^btime\s+(\d+)/);
        $load{d_cpu} += $1 + $2 + $3 if ($line =~ /^cpu\s+(\d+)\s+(\d+)\s+(\d+)/);
        $load{d_intrs} = $1 if ($line =~ /^intr\s+(\d+)/);
        $load{d_proc_switches} = $1 if ($line =~ /^ctxt\s+(\d+)/);
        $load{d_proc_forks} = $1 if ($line =~ /^processes\s+(\d+)/);
        $load{uptime} = $load{time} - $load{boot_time};
        $load{cpus}++ if ($line =~ /^cpu\d+/);
    }
    close FILE;
}

# collect virtual memory load
if (open(FILE, "/proc/vmstat")) {
    while (my $line = <FILE>) {
        $line =~ s/^\s+|\s+$//g;
        $load{d_page_in} += $1 if ($line =~ /^pgpgin\s+(\d+)/);
        $load{d_page_out} += $1 if ($line =~ /^pgpgout\s+(\d+)/);
        $load{d_swap_in} += $1 if ($line =~ /^pswpin\s+(\d+)/);
        $load{d_swap_out} += $1 if ($line =~ /^pswpout\s+(\d+)/);
    }
    close FILE;
}

# collect per user load if specified
if ($conf{user_load}) {
    foreach my $file (glob("/proc/[0-9]*/stat")) {
        open(FILE, $file) or next;
        my $line = <FILE>;
        close FILE;
        my @cols = split(/\s+/, $line);
        my $pid = $cols[0];
        my @stat = stat "/proc/$pid";
        my $cmd = $cols[1];
        $cmd =~ s/\s+|[{}()]//g;

        # ignore root processes that are not sshd or dropbear
        next if ($stat[4] == 0 && $cmd !~ /^(?:sshd|dropbear)$/);

        my $proc = "cmd:$cmd";
        $proc .= " cpu:" . ($cols[13] + $cols[14]);
        $proc .= " gid:$stat[5]";
        $proc .= " mem:$cols[22]";
        $proc .= " ram:$cols[23]";
        $proc .= " pid:$pid";
        $proc .= " ppid:$cols[3]";
        $proc .= " time:" .
            ($load{time} - $load{boot_time} - int($cols[21] / 100));
        $proc .= " uid:$stat[4]";

        # collect per user i/o load if available
        if (open(FILE, "/proc/$pid/io")) {
            my ($bytes, $ops);
            while (my $line = <FILE>) {
                if ($line =~ /^rchar:\s*(\d+)/) {
                    $proc .= " io_read_bytes:$1";
                    $bytes += $1;
                } elsif ($line =~ /^wchar:\s*(\d+)/) {
                    $proc .= " io_write_bytes:$1";
                    $bytes += $1;
                } elsif ($line =~ /^syscr:\s*(\d+)/) {
                    $proc .= " io_reads:$1";
                    $ops += $1;
                } elsif ($line =~ /^syscw:\s*(\d+)/) {
                    $proc .= " io_writes:$1";
                    $ops += $1;
                }
            }
            $proc .= " io_ops:$ops";
            $proc .= " io_bytes:$bytes";
        }
        $load{"pid_$pid"} = $proc;
    }
}

# untaint PATH
$ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";

# execute user-defined hook if specified
if (-x $conf{load_hook} && open(FILE, "$conf{load_hook}|")) {
    while (my $line = <FILE>) {
        $line =~ s/^\s*(?:#.*)?|\s+$//g;
        if ($line =~ /^(\S+)\s+(.*)/) {
            $load{$1} = $2;
        }
    }
    close FILE;
}

# convert load to single data string
my $data = "#ballast#" . nfreeze(\%load);
if (defined $conf{-cbc}) {
    # encrypt data if specified
    $data = $conf{-cbc}->encrypt_hex($data);
} else {
    $data = encode_base64($data, "");
}

# send data to each server specified
foreach my $host (split(/\s+/, $conf{data_host})) {
    eval {
        local $SIG{ALRM} = sub {die "alarm\n"};
        alarm $conf{data_timeout};
        my $sock = IO::Socket::INET->new(
            Proto    => 'tcp',
            PeerAddr => $host,
            PeerPort => $conf{data_port},
        );
        if ($sock) {
            print $sock "#$data\n";
            close $sock;
        } else {
            print STDERR "Unable to contact server $host\n";
        }
    };
    print STDERR "Timed out communicating with server $host\n"
        if ($@ eq "alarm\n");
}
alarm 0;

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"Crypt/CBC.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CRYPT_CBC';
  package Crypt::CBC;use Digest::MD5 'md5';use Carp;use strict;use bytes;use vars qw($VERSION);$VERSION='2.33';use constant RANDOM_DEVICE=>'/dev/urandom';sub new {my$class=shift;my$options={};if (ref $_[0]eq 'HASH'){$options=shift}elsif ($_[0]=~ /^-[a-zA-Z_]{1,20}$/){my%tmp=@_;while (my($key,$value)=each%tmp){$key =~ s/^-//;$options->{lc$key}=$value}}else {$options->{key}=shift;$options->{cipher}=shift}my$cipher_object_provided=$options->{cipher}&& ref$options->{cipher};my$pass=$options->{key};if ($cipher_object_provided){carp "Both a key and a pre-initialized Crypt::* object were passed. The key will be ignored" if defined$pass;$pass ||=''}elsif (!defined$pass){croak "Please provide an encryption/decryption passphrase or key using -key"}my%valid_modes=map {$_=>1}qw(none salt randomiv);my$header_mode=$options->{header};$header_mode ||='none' if exists$options->{prepend_iv}&&!$options->{prepend_iv};$header_mode ||='none' if exists$options->{add_header}&&!$options->{add_header};$header_mode ||='salt';croak "Invalid -header mode '$header_mode'" unless$valid_modes{$header_mode};croak "The -salt argument is incompatible with a -header mode of $header_mode" if exists$options->{salt}&& $header_mode ne 'salt';my$cipher=$options->{cipher};$cipher='Crypt::DES' unless$cipher;my$cipherclass=ref$cipher || $cipher;unless (ref$cipher){$cipher=$cipher=~/^Crypt::/ ? $cipher : "Crypt::$cipher";$cipher->can('encrypt')or eval "require $cipher; 1" or croak "Couldn't load $cipher: $@";$cipher =~ s/^Crypt::// unless$cipher->can('keysize')}my$ks=$options->{keysize};my$bs=$options->{blocksize};$ks ||=eval {$cipher->keysize};$bs ||=eval {$cipher->blocksize};$ks ||=$cipherclass =~ /blowfish/i ? 56 : 8;$bs ||=$ks;my$pcbc=$options->{'pcbc'};croak "The options -literal_key and -regenerate_key are incompatible with each other" if exists$options->{literal_key}&& exists$options->{regenerate_key};my$key;$key=$pass if$options->{literal_key};$key=$pass if exists$options->{regenerate_key}&&!$options->{regenerate_key};my$salt=$options->{salt};my$random_salt=1 unless defined$salt && $salt ne '1';croak "Argument to -salt must be exactly 8 bytes long" if defined$salt && length$salt!=8 && $salt ne '1';my$iv=$options->{iv};my$random_iv=1 unless defined$iv;croak "Initialization vector must be exactly $bs bytes long when using the $cipherclass cipher" if defined$iv and length($iv)!=$bs;my$literal_key=$options->{literal_key}|| (exists$options->{regenerate_key}&&!$options->{regenerate_key});my$legacy_hack=$options->{insecure_legacy_decrypt};my$padding=$options->{padding}|| 'standard';if ($padding && ref($padding)eq 'CODE'){for my$i (1..$bs-1){my$rbs=length($padding->(" "x$i,$bs,'e'));croak "padding method callback does not behave properly: expected $bs bytes back, got $rbs bytes back." unless ($rbs==$bs)}}else {$padding=$padding eq 'none' ? \&_no_padding :$padding eq 'null' ? \&_null_padding :$padding eq 'space' ? \&_space_padding :$padding eq 'oneandzeroes' ? \&_oneandzeroes_padding :$padding eq 'rijndael_compat'? \&_rijndael_compat :$padding eq 'standard' ? \&_standard_padding :croak "'$padding' padding not supported.  See perldoc Crypt::CBC for instructions on creating your own."}if ($header_mode eq 'salt'){croak "Cannot use salt-based key generation if literal key is specified" if$options->{literal_key};croak "Cannot use salt-based IV generation if literal IV is specified" if exists$options->{iv}}elsif ($header_mode eq 'randomiv'){croak "Cannot encrypt using a non-8 byte blocksize cipher when using randomiv header mode" unless$bs==8 || $legacy_hack}elsif ($header_mode eq 'none'){croak "You must provide an initialization vector using -iv when using -header=>'none'" unless exists$options->{iv}}if (defined$key && length($key)!=$ks){croak "If specified by -literal_key, then the key length must be equal to the chosen cipher's key length of $ks bytes"}if (defined$iv && length($iv)!=$bs){croak "If specified by -iv, then the initialization vector length must be equal to the chosen cipher's blocksize of $bs bytes"}return bless {'cipher'=>$cipher,'passphrase'=>$pass,'key'=>$key,'iv'=>$iv,'salt'=>$salt,'padding'=>$padding,'blocksize'=>$bs,'keysize'=>$ks,'header_mode'=>$header_mode,'legacy_hack'=>$legacy_hack,'literal_key'=>$literal_key,'pcbc'=>$pcbc,'make_random_salt'=>$random_salt,'make_random_iv'=>$random_iv,},$class}sub encrypt (\$$) {my ($self,$data)=@_;$self->start('encrypting');my$result=$self->crypt($data);$result .= $self->finish;$result}sub decrypt (\$$){my ($self,$data)=@_;$self->start('decrypting');my$result=$self->crypt($data);$result .= $self->finish;$result}sub encrypt_hex (\$$) {my ($self,$data)=@_;return join('',unpack 'H*',$self->encrypt($data))}sub decrypt_hex (\$$) {my ($self,$data)=@_;return$self->decrypt(pack'H*',$data)}sub start (\$$) {my$self=shift;my$operation=shift;croak "Specify <e>ncryption or <d>ecryption" unless$operation=~/^[ed]/i;$self->{'buffer'}='';$self->{'decrypt'}=$operation=~/^d/i}sub crypt (\$$){my$self=shift;my$data=shift;my$result;croak "crypt() called without a preceding start()" unless exists$self->{'buffer'};my$d=$self->{'decrypt'};unless ($self->{civ}){$result=$self->_generate_iv_and_cipher_from_datastream(\$data)if$d;$result=$self->_generate_iv_and_cipher_from_options()unless$d}my$iv=$self->{'civ'};$self->{'buffer'}.= $data;my$bs=$self->{'blocksize'};croak "When using no padding, plaintext size must be a multiple of $bs" if$self->{'padding'}eq \&_no_padding and length($data)% $bs;croak "When using rijndael_compat padding, plaintext size must be a multiple of $bs" if$self->{'padding'}eq \&_rijndael_compat and length($data)% $bs;return$result unless (length($self->{'buffer'})>= $bs);my@blocks=unpack("a$bs "x(int(length($self->{'buffer'})/$bs))."a*",$self->{'buffer'});$self->{'buffer'}='';if ($d){$self->{'buffer'}=length($blocks[-1])< $bs ? join '',splice(@blocks,-2): pop(@blocks)}else {$self->{'buffer'}=pop@blocks if length($blocks[-1])< $bs}for my$block (@blocks){if ($d){$result .= $iv=$iv ^ $self->{'crypt'}->decrypt($block);$iv=$block unless$self->{pcbc}}else {$result .= $iv=$self->{'crypt'}->encrypt($iv ^ $block)}$iv=$iv ^ $block if$self->{pcbc}}$self->{'civ'}=$iv;return$result}sub finish (\$) {my$self=shift;my$bs=$self->{'blocksize'};my$block=defined$self->{'buffer'}? $self->{'buffer'}: '';$self->{civ}||='';my$result;if ($self->{'decrypt'}){$block=length$block ? pack("a$bs",$block): '';if (length($block)){$result=$self->{'civ'}^ $self->{'crypt'}->decrypt($block);$result=$self->{'padding'}->($result,$bs,'d')}else {$result=''}}else {$block=$self->{'padding'}->($block,$bs,'e')|| '';$result=length$block ? $self->{'crypt'}->encrypt($self->{'civ'}^ $block): ''}delete$self->{'civ'};delete$self->{'buffer'};return$result}sub _generate_iv_and_cipher_from_datastream {my$self=shift;my$input_stream=shift;my$bs=$self->blocksize;my$header_mode=$self->header_mode;if ($header_mode eq 'none'){croak "You must specify a $bs byte initialization vector by passing the -iv option to new() when using -header_mode=>'none'" unless exists$self->{iv};$self->{civ}=$self->{iv};$self->{key}||=$self->_key_from_key($self->{passphrase})}elsif ($header_mode eq 'salt'){my ($salt)=$$input_stream =~ /^Salted__(.{8})/s;croak "Ciphertext does not begin with a valid header for 'salt' header mode" unless defined$salt;$self->{salt}=$salt;substr($$input_stream,0,16)='';my ($key,$iv)=$self->_salted_key_and_iv($self->{passphrase},$salt);$self->{iv}=$self->{civ}=$iv;$self->{key}=$key}elsif ($header_mode eq 'randomiv'){my ($iv)=$$input_stream =~ /^RandomIV(.{8})/s;croak "Ciphertext does not begin with a valid header for 'randomiv' header mode" unless defined$iv;croak "randomiv header mode cannot be used securely when decrypting with a >8 byte block cipher.\nUse the -insecure_legacy_decrypt flag if you are sure you want to do this" unless$self->blocksize==8 || $self->legacy_hack;$self->{iv}=$self->{civ}=$iv;$self->{key}=$self->_key_from_key($self->{passphrase});undef$self->{salt};substr($$input_stream,0,16)=''}else {croak "Invalid header mode '$header_mode'"}croak "Cipher stream did not contain IV or salt, and you did not specify these values in new()" unless$self->{key}&& $self->{civ};$self->{crypt}=ref$self->{cipher}? $self->{cipher}: $self->{cipher}->new($self->{key})or croak "Could not create $self->{cipher} object: $@";return ''}sub _generate_iv_and_cipher_from_options {my$self=shift;my$blocksize=$self->blocksize;my$result='';my$header_mode=$self->header_mode;if ($header_mode eq 'none'){croak "You must specify a $blocksize byte initialization vector by passing the -iv option to new() when using -header_mode=>'none'" unless exists$self->{iv};$self->{civ}=$self->{iv};$self->{key}||=$self->_key_from_key($self->{passphrase})}elsif ($header_mode eq 'salt'){$self->{salt}=$self->_get_random_bytes(8)if$self->{make_random_salt};defined (my$salt=$self->{salt})or croak "No header_mode of 'salt' specified, but no salt value provided";length($salt)==8 or croak "Salt must be exactly 8 bytes long";my ($key,$iv)=$self->_salted_key_and_iv($self->{passphrase},$salt);$self->{key}=$key;$self->{civ}=$self->{iv}=$iv;$result="Salted__${salt}"}elsif ($header_mode eq 'randomiv'){croak "randomiv header mode cannot be used when encrypting with a >8 byte block cipher. There is no option to allow this" unless$blocksize==8;$self->{key}||=$self->_key_from_key($self->{passphrase});$self->{iv}=$self->_get_random_bytes(8)if$self->{make_random_iv};length($self->{iv})==8 or croak "IV must be exactly 8 bytes long when used with header mode of 'randomiv'";$self->{civ}=$self->{iv};$result="RandomIV$self->{iv}"}croak "key and/or iv are missing" unless defined$self->{key}&& defined$self->{civ};$self->_taintcheck($self->{key});$self->{crypt}=ref$self->{cipher}? $self->{cipher}: $self->{cipher}->new($self->{key})or croak "Could not create $self->{cipher} object: $@";return$result}sub _taintcheck {my$self=shift;my$key=shift;return unless ${^TAINT};my$has_scalar_util=eval "require Scalar::Util; 1";my$tainted;if ($has_scalar_util){$tainted=Scalar::Util::tainted($key)}else {local($@,$SIG{__DIE__},$SIG{__WARN__});local $^W=0;eval {kill 0 * $key};$tainted=$@ =~ /^Insecure/}croak "Taint checks are turned on and your key is tainted. Please untaint the key and try again" if$tainted}sub _key_from_key {my$self=shift;my$pass=shift;my$ks=$self->{keysize};return$pass if$self->{literal_key};my$material=md5($pass);while (length($material)< $ks){$material .= md5($material)}return substr($material,0,$ks)}sub _salted_key_and_iv {my$self=shift;my ($pass,$salt)=@_;croak "Salt must be 8 bytes long" unless length$salt==8;my$key_len=$self->{keysize};my$iv_len=$self->{blocksize};my$desired_len=$key_len+$iv_len;my$data='';my$d='';while (length$data < $desired_len){$d=md5($d .$pass .$salt);$data .= $d}return (substr($data,0,$key_len),substr($data,$key_len,$iv_len))}sub random_bytes {my$self=shift;my$bytes=shift or croak "usage: random_bytes(\$byte_length)";$self->_get_random_bytes($bytes)}sub _get_random_bytes {my$self=shift;my$length=shift;my$result;if (-r RANDOM_DEVICE && open(F,RANDOM_DEVICE)){read(F,$result,$length);close F}else {$result=pack("C*",map {rand(256)}1..$length)}$result =~ /^(.+)$/s;length($1)==$length or croak "Invalid length while gathering $length random bytes";return $1}sub _standard_padding ($$$) {my ($b,$bs,$decrypt)=@_;$b=length$b ? $b : '';if ($decrypt eq 'd'){my$pad_length=unpack("C",substr($b,-1));return$b unless$pad_length >= 0 && $pad_length <= $bs;my@pad_chars=unpack("C*",substr($b,-$pad_length));return$b if grep {$pad_length!=$_}@pad_chars;return substr($b,0,$bs-$pad_length)}my$pad=$bs - length($b)% $bs;return$b .pack("C*",($pad)x$pad)}sub _space_padding ($$$) {my ($b,$bs,$decrypt)=@_;return unless length$b;$b=length$b ? $b : '';if ($decrypt eq 'd'){$b=~ s/ *\z//s;return$b}return$b .pack("C*",(32)x ($bs - length($b)% $bs))}sub _no_padding ($$$) {my ($b,$bs,$decrypt)=@_;return$b}sub _null_padding ($$$) {my ($b,$bs,$decrypt)=@_;return unless length$b;$b=length$b ? $b : '';if ($decrypt eq 'd'){$b=~ s/\0*\z//s;return$b}return$b .pack("C*",(0)x ($bs - length($b)% $bs))}sub _oneandzeroes_padding ($$$) {my ($b,$bs,$decrypt)=@_;$b=length$b ? $b : '';if ($decrypt eq 'd'){$b=~ s/\x80\0*\z//s;return$b}return$b .pack("C*",128,(0)x ($bs - length($b)% $bs - 1))}sub _rijndael_compat ($$$) {my ($b,$bs,$decrypt)=@_;return unless length$b;if ($decrypt eq 'd'){$b=~ s/\x80\0*\z//s;return$b}return$b .pack("C*",128,(0)x ($bs - length($b)% $bs - 1))}sub get_initialization_vector (\$) {my$self=shift;$self->iv()}sub set_initialization_vector (\$$) {my$self=shift;my$iv=shift;my$bs=$self->blocksize;croak "Initialization vector must be $bs bytes in length" unless length($iv)==$bs;$self->iv($iv)}sub salt {my$self=shift;my$d=$self->{salt};$self->{salt}=shift if @_;$d}sub iv {my$self=shift;my$d=$self->{iv};$self->{iv}=shift if @_;$d}sub key {my$self=shift;my$d=$self->{key};$self->{key}=shift if @_;$d}sub passphrase {my$self=shift;my$d=$self->{passphrase};if (@_){undef$self->{key};undef$self->{iv};$self->{passphrase}=shift}$d}sub cipher {shift->{cipher}}sub padding {shift->{padding}}sub keysize {shift->{keysize}}sub blocksize {shift->{blocksize}}sub pcbc {shift->{pcbc}}sub header_mode {shift->{header_mode}}sub legacy_hack {shift->{legacy_hack}}1;
CRYPT_CBC

$fatpacked{"Crypt/XXTEA_PP.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'CRYPT_XXTEA_PP';
  package Crypt::XXTEA_PP;use strict;use warnings;use utf8;use integer;use Carp;our$VERSION='0.0102';use Config;BEGIN {if (not defined$Config{use64bitint}){require bigint;bigint->import}}my$DELTA=0x9e3779b9;my$FACTOR=4;my$KEY_SIZE=16;my$ELEMENTS_IN_KEY=$KEY_SIZE / $FACTOR;my$MIN_BLOCK_SIZE=8;my$MIN_ELEMENTS_IN_BLOCK=$MIN_BLOCK_SIZE / $FACTOR;use constant keysize=>$KEY_SIZE;use constant blocksize=>$MIN_BLOCK_SIZE;sub isint {local $_=shift;return 0 unless defined;return 1 if /\A\s*[+-]?(?:0|[1-9][0-9]*)\s*\z/s;0}sub all (&@) {my$f=shift;$f->()or return 0 foreach @_;return 1}sub new {my$class=shift;my$key=shift;my$xxtea_key;croak('key is required')if not defined$key;if (my$ref_of_key=ref($key)){croak(sprintf('key must be a %d-byte-long STRING or a reference of ARRAY',$KEY_SIZE))if not $ref_of_key eq 'ARRAY';croak(sprintf('key must has %d elements if key is a reference of ARRAY',$ELEMENTS_IN_KEY))if scalar(@{$key})!=$ELEMENTS_IN_KEY;croak('each element of key must be a 32bit Integer if key is a reference of ARRAY')if not all {isint($_)!=0}@{$key};$xxtea_key=$key}else {croak(sprintf('key must be a %d-byte-long STRING or a reference of ARRAY',$KEY_SIZE))if length$key!=$KEY_SIZE;$xxtea_key=key_setup($key)}my$self={key=>$xxtea_key,};bless$self,ref($class)|| $class}sub encrypt {my$self=shift;my$plain_text=shift;croak(sprintf('plain_text size must be at least %d bytes',$MIN_BLOCK_SIZE))if length($plain_text)< $MIN_BLOCK_SIZE;croak(sprintf('plain_text size must be a multiple of %d bytes',$FACTOR))if length($plain_text)% $FACTOR!=0;my@block=unpack 'N*',$plain_text;my$cipher_text_ref=$self->encrypt_block(\@block);return pack('N*',@{$cipher_text_ref})}sub decrypt {my$self=shift;my$cipher_text=shift;croak(sprintf('cipher_text size must be at least %d bytes',$MIN_BLOCK_SIZE))if length($cipher_text)< $MIN_BLOCK_SIZE;croak(sprintf('cipher_text size must be a multiple of %d bytes',$FACTOR))if length($cipher_text)% $FACTOR!=0;my@block=unpack 'N*',$cipher_text;my$plain_text_ref=$self->decrypt_block(\@block);return pack('N*',@{$plain_text_ref})}sub encrypt_block {my$self=shift;my$block_ref=shift;my$key_ref=$self->{key};croak(sprintf('block must has at least %d elements',$MIN_ELEMENTS_IN_BLOCK))if scalar(@{$block_ref})< $MIN_ELEMENTS_IN_BLOCK;croak(sprintf('key must has %d elements',$ELEMENTS_IN_KEY))if scalar(@{$key_ref})!=$ELEMENTS_IN_KEY;my@block=map {$_ & 0xffff_ffff}@{$block_ref};my@key=map {$_ & 0xffff_ffff}@{$key_ref};my$delta=$DELTA & 0xffff_ffff;my$rounds=6 + 52 / (scalar@block);my$sum=0 & 0xffff_ffff;my$z=$block[-1];my ($e,$p,$y);for (0 .. $rounds-1){$sum=($sum + $delta)& 0xffff_ffff;$e=($sum >> 2)& 3;for (0 .. $#block-1){$p=$_;$y=$block[$p + 1 ];$z=$block[$p ]=($block[$p ]+ _MX($y,$z,$sum,$p,$e,\@key))& 0xffff_ffff}$p += 1;$y=$block[0];$z=$block[-1]=($block[-1]+ _MX($y,$z,$sum,$p,$e,\@key))& 0xffff_ffff}return \@block}sub decrypt_block {my$self=shift;my$block_ref=shift;my$key_ref=$self->{key};croak(sprintf('block must has at least %d elements',$MIN_ELEMENTS_IN_BLOCK))if scalar(@{$block_ref})< $MIN_ELEMENTS_IN_BLOCK;croak(sprintf('key must has %d elements',$ELEMENTS_IN_KEY))if scalar(@{$key_ref})!=$ELEMENTS_IN_KEY;my@block=map {$_ & 0xffff_ffff}@{$block_ref};my@key=map {$_ & 0xffff_ffff}@{$key_ref};my$delta=$DELTA & 0xffff_ffff;my$rounds=6 + 52 / (scalar@block);my$sum=($rounds * $delta)& 0xffff_ffff;my$y=$block[0];my ($e,$p,$z);for (0 .. $rounds-1){$e=($sum >> 2)& 3;for (reverse 1 .. $#block){$p=$_;$z=$block[$p - 1 ];$y=$block[$p ]=($block[$p ]- _MX($y,$z,$sum,$p,$e,\@key))& 0xffff_ffff}$p -= 1;$z=$block[-1];$y=$block[0]=($block[0]- _MX($y,$z,$sum,$p,$e,\@key))& 0xffff_ffff;$sum=($sum - $delta)& 0xffff_ffff}return \@block}sub _MX {my ($y,$z,$sum,$p,$e,$key)=@_;return ((((((($z >> 5)& 0xffff_ffff)^ (($y << 2)& 0xffff_ffff))& 0xffff_ffff)+ (((($y >> 3)& 0xffff_ffff)^ (($z << 4)& 0xffff_ffff))& 0xffff_ffff))& 0xffff_ffff)^ (((($sum ^ $y)& 0xffff_ffff)+ (($key->[($p & 3)^ $e ]^ $z)& 0xffff_ffff))& 0xffff_ffff))& 0xffff_ffff}sub key_setup {my$key_str=shift;croak(sprintf('key must be %s bytes long',$KEY_SIZE))if length($key_str)!=$KEY_SIZE;my@xxtea_key=unpack 'N*',$key_str;return \@xxtea_key}1;
CRYPT_XXTEA_PP

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
     if (my $fat = $_[0]{$_[1]}) {
       return sub {
         return 0 unless length $fat;
         $fat =~ s/^([^\n]*\n?)//;
         $_ = $1;
         return 1;
       };
     }
     return;
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

